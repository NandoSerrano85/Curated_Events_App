# Kubernetes Secrets for Events Platform
# Note: In production, use proper secret management (Sealed Secrets, External Secrets Operator, etc.)

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: events-platform
type: Opaque
data:
  # echo -n 'postgres123' | base64
  password: cG9zdGdyZXMxMjM=
  # echo -n 'postgres://postgres:postgres123@postgres:5432/events_platform?sslmode=disable' | base64  
  url: cG9zdGdyZXM6Ly9wb3N0Z3Jlczpwb3N0Z3JlczEyM0Bwb3N0Z3Jlczo1NDMyL2V2ZW50c19wbGF0Zm9ybT9zc2xtb2RlPWRpc2FibGU=

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: events-platform
type: Opaque
data:
  # echo -n 'redis123' | base64
  password: cmVkaXMxMjM=
  # echo -n 'redis://:redis123@redis:6379' | base64
  url: cmVkaXM6Ly86cmVkaXMxMjNAcmVkaXM6NjM3OQ==

---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: events-platform
type: Opaque
data:
  # echo -n 'your-super-secret-jwt-key-change-in-production-min-32-chars' | base64
  secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbi1taW4tMzItY2hhcnM=

---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secret
  namespace: events-platform
type: Opaque
data:
  # echo -n 'elastic123' | base64
  password: ZWxhc3RpYzEyMw==
  # echo -n 'http://elasticsearch:9200' | base64
  url: aHR0cDovL2VsYXN0aWNzZWFyY2g6OTIwMA==

---
apiVersion: v1
kind: Secret
metadata:
  name: messaging-secret
  namespace: events-platform
type: Opaque
data:
  # echo -n 'nats://nats:4222' | base64
  nats-url: bmF0czovL25hdHM6NDIyMg==
  # echo -n 'kafka:29092' | base64
  kafka-brokers: a2Fma2E6MjkwOTI=

---
apiVersion: v1
kind: Secret
metadata:
  name: external-services-secret
  namespace: events-platform
type: Opaque
data:
  # SMTP Configuration (base64 encoded)
  # echo -n 'smtp.gmail.com' | base64
  smtp-host: c210cC5nbWFpbC5jb20=
  # echo -n '587' | base64
  smtp-port: NTg3
  # echo -n 'your-email@gmail.com' | base64
  smtp-user: eW91ci1lbWFpbEBnbWFpbC5jb20=
  # echo -n 'your-email-password' | base64
  smtp-password: eW91ci1lbWFpbC1wYXNzd29yZA==
  
  # Slack Webhook (base64 encoded)
  # echo -n 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK' | base64
  slack-webhook: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvWU9VUi9TTEFDS1dFQkhPT0s=
  
  # AWS Credentials (if using AWS services)
  # echo -n 'AKIAIOSFODNN7EXAMPLE' | base64
  aws-access-key: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
  # echo -n 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' | base64
  aws-secret-key: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ==

---
# TLS Secret for HTTPS (create manually with actual certificates)
apiVersion: v1
kind: Secret
metadata:
  name: events-platform-tls
  namespace: events-platform
type: kubernetes.io/tls
data:
  # Replace with actual base64 encoded certificate and key
  tls.crt: LS0tLS1CRUdJTi0uLi4=  # Your certificate
  tls.key: LS0tLS1CRUdJTi0uLi4=  # Your private key

---
# Image Pull Secrets (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: events-platform
type: kubernetes.io/dockerconfigjson
data:
  # echo -n '{"auths":{"registry.example.com":{"username":"user","password":"pass","auth":"dXNlcjpwYXNz"}}}' | base64
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InVzZXIiLCJwYXNzd29yZCI6InBhc3MiLCJhdXRoIjoiZFhObGNqcHdZWE56In19fQ==